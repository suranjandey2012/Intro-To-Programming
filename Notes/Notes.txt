-g3 allows to debug macros and hash define constants.

-Wall: It means warning all.

gcc -g3 -Wall pob1.c  -> Compling step

gdb ./a.out  -Run the a.out file

(gdb) run 5 input.txt  -> To provide command line args no need to use 

./a.out arg1 arg2


we can use short forms like 

(gdb) r arg1 arg2

(gdb) h

(gdb) q

(gdb) run < input.txt -> (a.out) is accepting the input from file.

(gdb) break main -> gdb should stop before executing the main function.

(gdb) l -> list the error.

(gdb) p stands for print

(gdb) b main -> set a break point at main

(gdb) n -> next break point

(gdb) i b -> information about the break points

(gdb) n -> To continue to next lines

(gdb) d -> deletes all break points

(gdb) d number -> deletes a particular break point.

(gdb) dis number -> Disable a break point

(gdb) en number -> Enable the number breakpoint

(gdb) breakpoint checks the prev lines.

(gdb) s -> Step into that function (whenever a function arrives then step into that function)


Revise
---------
How do you compile?

gcc -g3 


How do you run?

$ gdb a.out

(gdb) run 

(gdb) run < input.txt

(gdb) run arg1 arg2 arg3 ......

How do you stop?

break (b) variants

b +<N> -> N lines after the current file.

After gdb set break boints before run so that program can stop at the points. 

If there is a statement like:

 x= f(i,j+1,....)

difference:
------------
s-> goes into the functio, and we will be able to run the statements in the function individually (step into).

n -> will directly excute the f and go to next line after function call.

fin -> if went into function and we don't want to see the rest of finction after some line. (use fin).

until lineno -> break out of a loop from the middle after we seen the required thing. Don't want to check the rest of the iteration. it will directly move to line after the line number.

conditional break point
--------------------------
for (i=;i;---){

line 11


}


(gdb) b 11

(gdb) cond 2 ((i==91)||(i==92))  it will stop in iteration only at i==92 and i==91.

2 stands for the break point number above.

After this we can use continue or until. 


Gdb file  -> stores hsitory in gdb we can get commands using the up arrow in gdb.
----------
~/.gdbinit
set hsitory save on
set history size 1000


if we declare display a[i] before the run command -> it will display a[i] all the time in the iteration no need to use p val all time.

(gdb) info locals -> prints local variables in the function.

(gdb) info args -> prints the arguments in the function.


you have an array:
   char buff[10];
   int i,j,k;
   

(gdb) watch p->a (*p->a)/ watch a[i] (watch points): during program execution if a[i] or an element of the structure p changes then it stops the program and prints the value before the statement and the value after the statement.
 
(gdb) watch buff -> it shows the entire array buffer before and after.

(gdb) tui enable -> it will show code in one terminal and gdb terminal in other half.


(gdb) print (int [10]) p -> starting from address p prints all elements of the array -> will be useful to print entire array.

(gdb) print *p@10 -> prints starting from address p 10 elements of the same kind.




Program Memory:
-----------------

#define LEN 100

int a[LEN], i, N;  // Global variables

int main()
{
  int i;
  char a[10];
}



code /Text -> read only not modifiable.

Global variables -> default inititlized to 0. Global region memory is assigned.

Heap -> malloc and calloc

stack -> Recursive data is stored like the local variables of the called function in LIFO manner. 

stack stores -> Activation record (AR) / stack frames [The items stored in the stack]. Activation stack is created during the run time not during the compile time.

The where command in (gdb) -> shows us the history of the activation stack in the LIFO manner. [stack trace like the catch block in Java].

up command -> it goes back to prev activation record/ stack trace [It travels down].

down command -> it goes next activation record / stack trace  [It travesl up]. 
